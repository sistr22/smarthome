blueprint:
  name: Philips Hue Dimmer switch v1 (Zigbee2MQTT)
  domain: automation
  input:
    action_sensor:
      name: Action Sensor
      description: Zigbee2mqtt Hue Dimmer action
      selector:
        entity:
          domain: sensor
    helper_last_controller_event:
      name: (Required) Helper - Last Controller Event
      description:
        Input Text used to store the last event fired by the controller.
        You will need to manually create a text input Helper entity for this.
      default: ""
      selector:
        entity:
          domain: input_text
          multiple: false
    on_press:
      name: ON button press
      description: Action to run
      default: []
      selector:
        action: {}
    on_hold:
      name: ON button hold
      description: Action to run (repeat while holding)
      default: []
      selector:
        action: {}
    on_hold_once:
      name: ON button hold once
      description: Action to run only once (no repeat)
      default: []
      selector:
        action: {}
    on_hold_release:
      name: ON button hold release
      description: Action to run
      default: []
      selector:
        action: {}
    up_press:
      name: UP button press
      description: Action to run
      default: []
      selector:
        action: {}
    up_hold:
      name: UP button hold
      description: Action to run (repeat while holding)
      default: []
      selector:
        action: {}
    up_hold_once:
      name: UP button hold once
      description: Action to run only once (no repeat)
      default: []
      selector:
        action: {}
    up_hold_release:
      name: UP button hold release
      description: Action to run
      default: []
      selector:
        action: {}
    down_press:
      name: DOWN button press
      description: Action to run
      default: []
      selector:
        action: {}
    down_hold:
      name: DOWN button hold
      description: Action to run (repeat while holding)
      default: []
      selector:
        action: {}
    down_hold_once:
      name: DOWN button hold once
      description: Action to run only once (no repeat)
      default: []
      selector:
        action: {}
    down_hold_release:
      name: DOWN button hold release
      description: Action to run
      default: []
      selector:
        action: {}
    off_press:
      name: OFF/HUE button press
      description: Action to run
      default: []
      selector:
        action: {}
    off_hold:
      name: OFF/HUE button hold
      description: Action to run (repeat while holding)
      default: []
      selector:
        action: {}
    off_hold_once:
      name: OFF/HUE button hold once
      description: Action to run only once (no repeat)
      default: []
      selector:
        action: {}
    off_hold_release:
      name: OFF/HUE button hold release
      description: Action to run
      default: []
      selector:
        action: {}
  source_url: "https://gist.github.com/CrazyCoder/28d660d9e2e8464458e591ad79b3698e"
mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input action_sensor
condition:
  - condition: template
    value_template: '{{ trigger.event.data.new_state.state not in ("", "None") }}'
action:
  - variables:
      helper_last_controller_event: !input helper_last_controller_event
      command: "{{ trigger.event.data.new_state.state }}"
      prev_command: "{{ states(helper_last_controller_event) }}"
  # - service: logbook.log
  #   data:
  #     name: "command: "
  #     message: >
  #       {{ command }} - {{ prev_command }}
  - service: input_text.set_value
    data:
      entity_id: !input helper_last_controller_event
      value: "{{ command }}"
  - choose:
      - conditions:
          - '{{ command == "on-press" }}'
        sequence: !input on_press
      - conditions:
          - '{{ command == "on-hold" }}'
        sequence: !input on_hold
      - conditions:
          - '{{ command == "on-hold-release" }}'
        sequence: !input on_hold_release
      - conditions:
          - '{{ command == "up-press" }}'
        sequence: !input up_press
      - conditions:
          - '{{ command == "up-hold" }}'
        sequence: !input up_hold
      - conditions:
          - '{{ command == "up-hold-release" }}'
        sequence: !input up_hold_release
      - conditions:
          - '{{ command == "down-press" }}'
        sequence: !input down_press
      - conditions:
          - '{{ command == "down-hold" }}'
        sequence: !input down_hold
      - conditions:
          - '{{ command == "down-hold-release" }}'
        sequence: !input down_hold_release
      - conditions:
          - '{{ command == "off-press" }}'
        sequence: !input off_press
      - conditions:
          - '{{ command == "off-hold" }}'
        sequence: !input off_hold
      - conditions:
          - '{{ command == "off-hold-release" }}'
        sequence: !input off_hold_release
  - choose:
      - conditions:
          - '{{ command == "on-hold" and prev_command == "on-press" }}'
        sequence: !input on_hold_once
      - conditions:
          - '{{ command == "up-hold" and prev_command == "up-press" }}'
        sequence: !input up_hold_once
      - conditions:
          - '{{ command == "down-hold" and prev_command == "down-press" }}'
        sequence: !input down_hold_once
      - conditions:
          - '{{ command == "off-hold" and prev_command == "off-press" }}'
        sequence: !input off_hold_once
