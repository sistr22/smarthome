blueprint:
  name: Hue Dimmer switch room control
  description:
    "Fast setup for room light control with good default" 
  domain: automation
  input:
    action_sensor:
      name: Action Sensor
      description: Zigbee2mqtt Hue Dimmer action
      selector:
        entity:
          integration: mqtt
          domain: sensor
          multiple: false
    helper_last_controller_event:
      name: (Required) Helper - Last Controller Event
      description:
        Input Text used to store the last event fired by the controller.
        You will need to manually create a text input Helper entity for this.
      default: ""
      selector:
        entity:
          domain: input_text
          multiple: false
    linked_area:
      name: Area
      description: The room to control
      selector:
        area:
    off_press:
      name: OFF/HUE button press
      description: Action to run
      default: []
      selector:
        action: {}
    off_press_release:
      name: OFF/HUE button release
      description: Action to run
      default: []
      selector:
        action: {}
    off_hold:
      name: OFF/HUE button hold
      description: Action to run (repeat while holding)
      default: []
      selector:
        action: {}
    off_hold_once:
      name: OFF/HUE button hold once
      description: Action to run only once (no repeat)
      default: []
      selector:
        action: {}
    off_hold_release:
      name: OFF/HUE button hold release
      description: Action to run
      default: []
      selector:
        action: {}
  source_url: "https://gist.github.com/CrazyCoder/28d660d9e2e8464458e591ad79b3698e"
mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input action_sensor
variables:
   target_area: !input linked_area
condition:
  - condition: template
    value_template: '{{ trigger.event.data.new_state.state not in ("", "None") }}'
action:
  - variables:
      helper_last_controller_event: !input helper_last_controller_event
      command: "{{ trigger.event.data.new_state.state }}"
      prev_command: "{{ states(helper_last_controller_event) }}"
  # - service: logbook.log
  #   data:
  #     name: "command: "
  #     message: >
  #       {{ command }} - {{ prev_command }}
  - service: input_text.set_value
    data:
      entity_id: !input helper_last_controller_event
      value: "{{ command }}"
  - choose:
  #    - conditions:
  #        - '{{ command == "on_press" }}'
  #      sequence:
      - conditions:
          - '{{ command == "on_press_release" }}'
        sequence:
          - service: light.toggle
            data: {}
            target:
              area_id: !input linked_area
#      - conditions:
#          - '{{ command == "on_hold" }}'
#        sequence: 
#      - conditions:
#          - '{{ command == "on_hold_release" }}'
#        sequence: 
#      - conditions:
#          - '{{ command == "up_press" }}'
#        sequence: !input up_press
      - conditions:
          - '{{ command == "up_press_release" }}'
        sequence:
          - if:
              - condition: template
                value_template: |-
                  {% set lights_on = expand(area_entities(target_area)) %}
                       {{ lights_on | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'on') | list | count > 0 }}
            then:
              - service: light.turn_on
                data:
                  transition: 0.6
                  brightness_step_pct: 10
                target:
                  area_id: !input linked_area
            else:
              - service: light.turn_on
                data:
                  transition: 1.5
                  color_temp: 290
                  brightness_pct: 100
                target:
                  area_id: !input linked_area
      - conditions:
          - '{{ command == "up_hold" }}'
        sequence:
          - repeat:
              count: "10"
              sequence:
                - service: light.turn_on
                  data:
                    transition: 0.1
                    brightness_step_pct: 4
                  target: 
                    area_id: !input linked_area
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: 0
                    milliseconds: 100
#      - conditions:
#          - '{{ command == "up_hold_release" }}'
#        sequence: !input up_hold_release
#      - conditions:
#          - '{{ command == "down_press" }}'
#        sequence:
      - conditions:
          - '{{ command == "down_press_release" }}'
        sequence:
          - if:
              - condition: template
                value_template: |-
                  {% set lights_on = expand(area_entities(target_area)) %}
                       {{ lights_on | selectattr('state', 'eq', 'on') | list | count > 0 }}
            then:
              - if:
                  - condition: template
                    value_template: >-
                      {% set light_entities = expand(area_entities(target_area))
                      %}

                      {{ expand(light_entities) | selectattr('state', 'eq', 'on') 
                                | selectattr('attributes.brightness', 'lt', 11) | list | count > 0}}
                then:
                  - service: light.turn_on
                    data:
                      transition: 0.6
                      brightness_pct: 1
                      color_temp: 200
                    target:
                      area_id: !input linked_area
                else:
                  - service: light.turn_on
                    data:
                      transition: 0.6
                      brightness_step_pct: -10
                    target:
                      area_id: !input linked_area
            else:
              - service: light.turn_on
                data:
                  transition: 0.6
                  brightness_pct: 1
                target:
                  area_id: !input linked_area
      - conditions:
          - '{{ command == "down_hold" }}'
        sequence:
          - repeat:
              count: "10"
              sequence:
                - if:
                    - condition: template
                      value_template: >-
                        {% set light_entities = expand(area_entities(target_area))
                        %}

                        {{ expand(light_entities) | selectattr('state', 'eq', 'on')
                                  | selectattr('attributes.brightness', 'lt', 11) | list | count > 0}}
                  then:
                    - service: light.turn_on
                      data:
                        transition: 0.1
                        brightness_step_pct: -4
                      target:
                        area_id: !input linked_area
                    - delay:
                        hours: 0
                        minutes: 0
                        seconds: 0
                        milliseconds: 100
                  else:
                    - service: light.turn_on
                      data:
                        transition: 0.6
                        brightness_pct: 1
                      target:
                        area_id: !input linked_area
                    - delay:
                        hours: 0
                        minutes: 0
                        seconds: 1
                        milliseconds: 0
#      - conditions:
#          - '{{ command == "down_hold_release" }}'
#        sequence: !input down_hold_release
      - conditions:
          - '{{ command == "off_press" }}'
        sequence: !input off_press
      - conditions:
          - '{{ command == "off_press_release" }}'
        sequence:
          - service: light.turn_off
            data:
              transition: 0.1
            target:
              area_id: !input linked_area
      - conditions:
          - '{{ command == "off_hold" }}'
        sequence: !input off_hold
      - conditions:
          - '{{ command == "off_hold_release" }}'
        sequence: !input off_hold_release
  - choose:
#      - conditions:
#          - '{{ command == "on_hold" and prev_command == "on_press" }}'
#        sequence: 
#      - conditions:
#          - '{{ command == "up_hold" and prev_command == "up_press" }}'
#        sequence:
#      - conditions:
#          - '{{ command == "down_hold" and prev_command == "down_press" }}'
#        sequence: !input down_hold_once
      - conditions:
          - '{{ command == "off_hold" and prev_command == "off_press" }}'
        sequence: !input off_hold_once
